using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AddItem
{
    public class Ответы_на_вопросы
    {
        //1) Можно ли изменить строку ? Покажите как
        //* Console.WriteLine("Введите текст");
        //* string text = Console.ReadLine();
        //* var replacement = text.Replace(' ', '*'); 
        //  Console.WriteLine(text);
        //Console.WriteLine(replacement);
        //Console.ReadLine();*/


        //2) Что такое рефлексия? Приведите пример динамического подключения библиотеки
        //Процесс выявления типов во время выполнения приложения. Каждое приложение содержит набор классов, интерфейсов, методов, свойств 
        //- рефлексия позволяет определить все эти составные элементы приложения.
        //динамического подключение ПРИМЕР using ClassLibrary1 смотрите в Program.cs 

        //3) Что такое сериализация? Покажите XML сериализацию
        //Это процесс преобразования объекта в поток байтов для сохранения или передачи в память, базу данных или файл. 
        //Предназначен чтобы сохранять объект для последующего воссоздания при необходимости. Обратный процесс десериализация
        //класс, подлежащий сериализации, должен иметь стандартный конструктор без параметров.
        //Во-первых должны использовать 
        //using System;
        //using System.IO;
        //using System.Xml.Serialization;
        //Во-Вторых 
        // класс и его члены объявлены как public
        //[Serializable]
        //// передаем в конструктор тип класса
        //XmlSerializer formatter = new XmlSerializer(typeof(Класс));
        //using (FileStream fs = new FileStream("Название.xml", FileMode.OpenOrCreate))
        //   {
        //      formatter.Serialize(fs, объект);

        //       Console.WriteLine("Объект сериализован");
        //   }
        //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //4) Создайте generic c огрнаичением : IDisposable
        //internal sealed class GenericTypeThatRequiresAnEnum<T>
        //{
        //    static GenericTypeThatRequiresAnEnum()
        //    {
        //        if (!typeof(T).IsEnum)
        //        {
        //            throw new ArgumentException("T must be an enumerated type");
        //        }
        //    }
        //}


        //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //5)Приведите плюсы и минусы Interface и Abstract class
        //Абстрактный класс — это класс, у которого не реализован один или больше методов(некоторые языки требуют такие методы помечать специальными ключевыми словами).

        //Интерфейс — это абстрактный класс, у которого ни один метод не реализован, все они публичные и нет переменных класса.
        //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //6)Что такое nullable тип? Зачем он нужен?
        //Тип с нулевым значением - это структура, состоящая из двух полей: a bool и a T. 
        //Когда значение равно null, bool является ложным, а значение T имеет значение по умолчанию.
        //Если значение не равно null, значение bool равно true.
    }
}
